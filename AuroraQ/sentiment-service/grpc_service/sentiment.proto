// grpc_service/sentiment.proto
// Protocol buffer definition for sentiment analysis gRPC service

syntax = "proto3";

package sentiment_service;

// Sentiment analysis service definition
service SentimentAnalyzer {
    // Analyze single text sentiment
    rpc AnalyzeSentiment (SentimentRequest) returns (SentimentResponse);
    
    // Analyze multiple texts in batch
    rpc AnalyzeBatchSentiment (BatchSentimentRequest) returns (BatchSentimentResponse);
    
    // Fuse multiple sentiment scores
    rpc FuseSentimentScores (FusionRequest) returns (FusionResponse);
    
    // Get service health status
    rpc GetHealth (HealthRequest) returns (HealthResponse);
    
    // Get service statistics
    rpc GetStatistics (StatisticsRequest) returns (StatisticsResponse);
}

// Request messages
message SentimentRequest {
    string text = 1;
    string symbol = 2;
    bool include_detailed = 3;
}

message BatchSentimentRequest {
    repeated string texts = 1;
    string symbol = 2;
    bool include_detailed = 3;
}

message FusionRequest {
    map<string, double> sentiment_scores = 1;
    string symbol = 2;
    int64 timestamp = 3;
}

message HealthRequest {}

message StatisticsRequest {
    string symbol = 1;
}

// Response messages
message SentimentResponse {
    double sentiment_score = 1;
    string label = 2;
    double confidence = 3;
    double processing_time = 4;
    int64 timestamp = 5;
    repeated string keywords = 6;
    string scenario_tag = 7;
    map<string, string> metadata = 8;
}

message BatchSentimentResponse {
    repeated SentimentResponse results = 1;
    int32 total_count = 2;
    double average_score = 3;
    double processing_time = 4;
    int64 timestamp = 5;
}

message FusionResponse {
    double fused_score = 1;
    double confidence = 2;
    string trend = 3;
    double volatility = 4;
    map<string, double> raw_scores = 5;
    map<string, double> weights_used = 6;
    int32 sources_count = 7;
    double processing_time = 8;
    int64 timestamp = 9;
    map<string, string> fusion_metadata = 10;
}

message HealthResponse {
    string status = 1;
    int64 timestamp = 2;
    string version = 3;
    double uptime = 4;
    map<string, string> components = 5;
    map<string, string> metrics = 6;
}

message StatisticsResponse {
    string symbol = 1;
    int32 count = 2;
    double mean_score = 3;
    double std_score = 4;
    double min_score = 5;
    double max_score = 6;
    double current_score = 7;
    map<string, double> trend_distribution = 8;
    map<string, double> source_weights = 9;
    double average_confidence = 10;
    int64 timestamp = 11;
}