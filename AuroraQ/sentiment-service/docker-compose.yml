version: '3.8'

services:
  # Redis 서비스
  redis:
    image: redis:7-alpine
    container_name: auroraQ-sentiment-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - aurora-sentiment-network

  # Sentiment Service 메인 애플리케이션
  sentiment-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auroraQ-sentiment-service
    restart: unless-stopped
    ports:
      - "8000:8000"    # FastAPI REST API
      - "8080:8080"    # Prometheus metrics
      - "50051:50051"  # gRPC service
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - sentiment_models:/app/models
      - sentiment_cache:/app/cache
    environment:
      # Service Configuration
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - HOST=0.0.0.0
      - PORT=8000
      - MAX_WORKERS=2  # VPS 최적화
      - PYTHONPATH=/app
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - CACHE_TTL=300
      
      # Model Configuration
      - FINBERT_MODEL_NAME=ProsusAI/finbert
      - FINBERT_MODEL_PATH=/app/models/finbert
      - FINBERT_CACHE_DIR=/app/cache/transformers
      - FINBERT_MAX_LENGTH=512
      - FINBERT_BATCH_SIZE=8  # VPS 리소스 고려
      
      # Performance Configuration
      - ENABLE_MODEL_CACHING=true
      - MODEL_WARMUP=true
      - MAX_CONCURRENT_REQUESTS=50
      - REQUEST_TIMEOUT=30.0
      
      # Security Configuration
      - ALLOWED_HOSTS=109.123.239.30,localhost,127.0.0.1
      - CORS_ORIGINS=*
      
      # Monitoring Configuration
      - ENABLE_METRICS=true
      - PROMETHEUS_PORT=8080
      
      # External API Keys (환경변수 파일에서 로드)
      - GOOGLE_NEWS_API_KEY=${GOOGLE_NEWS_API_KEY:-}
      - YAHOO_FINANCE_API_KEY=${YAHOO_FINANCE_API_KEY:-}
      - NEWSAPI_KEY=${NEWSAPI_KEY:-}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY:-}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID:-}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET:-}
      - GOOGLE_SEARCH_API_KEY=${GOOGLE_SEARCH_API_KEY:-}
      - GOOGLE_CUSTOM_SEARCH_ID=${GOOGLE_CUSTOM_SEARCH_ID:-}
      - BING_SEARCH_API_KEY=${BING_SEARCH_API_KEY:-}
      
      # AuroraQ Integration
      - AURORA_API_URL=${AURORA_API_URL:-http://host.docker.internal:8080}
      - AURORA_API_KEY=${AURORA_API_KEY:-}
      - AURORA_TIMEOUT=30
      - AURORA_RETRY_ATTEMPTS=3
      
      # News Processing (VPS 최적화)
      - NEWS_MAX_ARTICLES=30
      - NEWS_HOURS_BACK=12
      - NEWS_RELEVANCE_THRESHOLD=0.4
      
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - aurora-sentiment-network
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: auroraQ-sentiment-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'  # VPS 디스크 공간 고려
      - '--web.enable-lifecycle'
    networks:
      - aurora-sentiment-network

  # 웹 대시보드 서비스
  web-dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile.web
    container_name: auroraQ-sentiment-web-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://sentiment-service:8000
      - VITE_WS_URL=ws://sentiment-service:8000
    depends_on:
      - sentiment-service
    networks:
      - aurora-sentiment-network

  # 터미널 대시보드 서비스 (백그라운드)
  terminal-dashboard:
    build:
      context: .
      dockerfile: dashboard/Dockerfile.terminal
    container_name: auroraQ-sentiment-terminal
    restart: unless-stopped
    environment:
      - SERVICE_URL=http://sentiment-service:8000
      - REFRESH_INTERVAL=5
      - THEME=default
    depends_on:
      - sentiment-service
    networks:
      - aurora-sentiment-network
    volumes:
      - ./logs:/app/logs

  # Nginx 리버스 프록시 (선택적)
  nginx:
    image: nginx:alpine
    container_name: auroraQ-sentiment-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - sentiment-service
      - web-dashboard
    networks:
      - aurora-sentiment-network

volumes:
  sentiment_models:
    driver: local
  sentiment_cache:
    driver: local
  sentiment_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  aurora-sentiment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16