version: '3.8'

# VPS AuroraQ Trading System - Production Docker Compose
# 최적화된 프로덕션 환경 설정

services:
  # 메인 트레이딩 시스템
  auroraQ-trading:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auroraQ-trading-prod
    hostname: auroraQ-trading
    restart: unless-stopped
    
    # 포트 매핑
    ports:
      - "8004:8004"  # API 서버
      - "8003:8003"  # WebSocket (필요시)
    
    # 환경 변수
    environment:
      - TRADING_MODE=live
      - VPS_MEMORY_LIMIT=3G
      - ENABLE_UNIFIED_LOGGING=true
      - API_HOST=0.0.0.0
      - API_PORT=8004
      - TZ=Asia/Seoul
      - PYTHONPATH=/app
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app/data/trading.db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECURITY_ENABLED=true
      - MONITORING_ENABLED=true
      - PERFORMANCE_OPTIMIZATION=true
    
    # 볼륨 마운트
    volumes:
      # 로그 디렉토리 (호스트에 영구 저장)
      - ./logs:/app/logs
      # 데이터 디렉토리 (백업, 캐시, 설정)
      - ./data:/app/data
      # 설정 파일 오버라이드
      - ./config:/app/config:ro
      # 타임존 동기화
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    
    # 리소스 제한 (VPS 환경 최적화)
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    # 네트워크 설정
    networks:
      - auroraQ-network
    
    # 의존성
    depends_on:
      - redis
      - prometheus
    
    # 헬스체크 오버라이드
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # 로그 설정
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=auroraQ-trading"

  # Redis 캐시 서버
  redis:
    image: redis:7-alpine
    container_name: auroraQ-redis
    restart: unless-stopped
    
    ports:
      - "6379:6379"
    
    # Redis 설정
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    networks:
      - auroraQ-network
    
    # 리소스 제한
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: auroraQ-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    
    networks:
      - auroraQ-network
    
    # 리소스 제한
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana 대시보드 (선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: auroraQ-grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./dashboard/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./dashboard/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
    
    networks:
      - auroraQ-network
    
    depends_on:
      - prometheus
    
    # 리소스 제한
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx 리버스 프록시 (보안 강화)
  nginx:
    image: nginx:alpine
    container_name: auroraQ-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx-logs:/var/log/nginx
    
    networks:
      - auroraQ-network
    
    depends_on:
      - auroraQ-trading
    
    # 리소스 제한
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

# 네트워크 정의
networks:
  auroraQ-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: auroraQ-br0

# 볼륨 정의
volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/auroraQ-redis
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/auroraQ-prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/auroraQ-grafana
  
  nginx-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/nginx